import { createContext, useCallback, useState } from 'react';
import { BrowserWallet } from '@martifylabs/mesh';
const INITIAL_STATE = {
    walletName: '', walletInstance: {},
};
export const useWalletStore = () => {
    const [error, setError] = useState(undefined);
    const [connectingWallet, setConnectingWallet] = useState(false);
    const [connectedWalletInstance, setConnectedWalletInstance] = useState(INITIAL_STATE.walletInstance);
    const [connectedWalletName, setConnectedWalletName] = useState(INITIAL_STATE.walletName);
    const connectWallet = useCallback(async (walletName) => {
        setConnectingWallet(true);
        try {
            const walletInstance = await BrowserWallet.enable(walletName);
            setConnectedWalletInstance(walletInstance);
            setConnectedWalletName(walletName);
            setError(undefined);
        }
        catch (error) {
            setError(error);
            console.error(error);
        }
        setConnectingWallet(false);
    }, []);
    const disconnect = useCallback(() => {
        setConnectedWalletName(INITIAL_STATE.walletName);
        setConnectedWalletInstance(INITIAL_STATE.walletInstance);
    }, []);
    return {
        hasConnectedWallet: INITIAL_STATE.walletName !== connectedWalletName,
        connectedWalletInstance,
        connectedWalletName,
        connectingWallet,
        connectWallet,
        disconnect,
        error,
    };
};
export const WalletContext = createContext({
    hasConnectedWallet: false,
    connectedWalletInstance: INITIAL_STATE.walletInstance,
    connectedWalletName: INITIAL_STATE.walletName,
    connectingWallet: false,
});
//# sourceMappingURL=WalletContext.jsx.map