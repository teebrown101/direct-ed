{"version":3,"file":"WalletContext.jsx","sourceRoot":"","sources":["../../src/contexts/WalletContext.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAC7D,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAYlD,MAAM,aAAa,GAAG;IACpB,UAAU,EAAE,EAAE,EAAE,cAAc,EAAE,EAAmB;CACpD,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAG,GAAG,EAAE;IACjC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAU,SAAS,CAAC,CAAC;IAEvD,MAAM,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,GAC3C,QAAQ,CAAU,KAAK,CAAC,CAAC;IAE3B,MAAM,CAAC,uBAAuB,EAAE,0BAA0B,CAAC,GACzD,QAAQ,CAAgB,aAAa,CAAC,cAAc,CAAC,CAAC;IAExD,MAAM,CAAC,mBAAmB,EAAE,sBAAsB,CAAC,GACjD,QAAQ,CAAS,aAAa,CAAC,UAAU,CAAC,CAAC;IAE7C,MAAM,aAAa,GAAG,WAAW,CAAC,KAAK,EAAE,UAAkB,EAAE,EAAE;QAC7D,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAE1B,IAAI;YACF,MAAM,cAAc,GAAG,MAAM,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAC9D,0BAA0B,CAAC,cAAc,CAAC,CAAC;YAC3C,sBAAsB,CAAC,UAAU,CAAC,CAAC;YACnC,QAAQ,CAAC,SAAS,CAAC,CAAC;SACrB;QAAC,OAAO,KAAK,EAAE;YACd,QAAQ,CAAC,KAAK,CAAC,CAAC;YAChB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACtB;QAED,mBAAmB,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,UAAU,GAAG,WAAW,CAAC,GAAG,EAAE;QAClC,sBAAsB,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QACjD,0BAA0B,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;IAC3D,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO;QACL,kBAAkB,EAAE,aAAa,CAAC,UAAU,KAAK,mBAAmB;QACpE,uBAAuB;QACvB,mBAAmB;QACnB,gBAAgB;QAChB,aAAa;QACb,UAAU;QACV,KAAK;KACN,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,aAAa,CAAgB;IACxD,kBAAkB,EAAE,KAAK;IACzB,uBAAuB,EAAE,aAAa,CAAC,cAAc;IACrD,mBAAmB,EAAE,aAAa,CAAC,UAAU;IAC7C,gBAAgB,EAAE,KAAK;CACxB,CAAC,CAAC","sourcesContent":["import { createContext, useCallback, useState } from 'react';\nimport { BrowserWallet } from '@martifylabs/mesh';\n\ninterface WalletContext {\n  hasConnectedWallet: boolean,\n  connectedWalletInstance: BrowserWallet,\n  connectedWalletName: string,\n  connectingWallet: boolean,\n  connectWallet?: (walletName: string) => Promise<void>,\n  disconnect?: () => void,\n  error?: unknown,\n}\n\nconst INITIAL_STATE = {\n  walletName: '', walletInstance: {} as BrowserWallet,\n};\n\nexport const useWalletStore = () => {\n  const [error, setError] = useState<unknown>(undefined);\n\n  const [connectingWallet, setConnectingWallet] =\n    useState<boolean>(false);\n\n  const [connectedWalletInstance, setConnectedWalletInstance] =\n    useState<BrowserWallet>(INITIAL_STATE.walletInstance);\n\n  const [connectedWalletName, setConnectedWalletName] =\n    useState<string>(INITIAL_STATE.walletName);\n\n  const connectWallet = useCallback(async (walletName: string) => {\n    setConnectingWallet(true);\n\n    try {\n      const walletInstance = await BrowserWallet.enable(walletName);\n      setConnectedWalletInstance(walletInstance);\n      setConnectedWalletName(walletName);\n      setError(undefined);\n    } catch (error) {\n      setError(error);\n      console.error(error);\n    }\n\n    setConnectingWallet(false);\n  }, []);\n\n  const disconnect = useCallback(() => {\n    setConnectedWalletName(INITIAL_STATE.walletName);\n    setConnectedWalletInstance(INITIAL_STATE.walletInstance);\n  }, []);\n\n  return {\n    hasConnectedWallet: INITIAL_STATE.walletName !== connectedWalletName,\n    connectedWalletInstance,\n    connectedWalletName,\n    connectingWallet,\n    connectWallet,\n    disconnect,\n    error,\n  };\n};\n\nexport const WalletContext = createContext<WalletContext>({\n  hasConnectedWallet: false,\n  connectedWalletInstance: INITIAL_STATE.walletInstance,\n  connectedWalletName: INITIAL_STATE.walletName,\n  connectingWallet: false,\n});\n"]}